// JavaScript –¥–ª—è popup Chrome –ø–ª–∞–≥—ñ–Ω–∞ Freelance Response Generator
// –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞ —Ç–∞ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º

// DOM –µ–ª–µ–º–µ–Ω—Ç–∏
const apiKeyInput = document.getElementById('apiKey');
const togglePasswordBtn = document.getElementById('togglePassword');
const saveKeyBtn = document.getElementById('saveKey');
const testKeyBtn = document.getElementById('testKey');
const statusDiv = document.getElementById('status');

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ popup
document.addEventListener('DOMContentLoaded', async () => {
    console.log('Popup –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π API –∫–ª—é—á
    await loadSavedApiKey();
    
    // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    setupEventListeners();
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ API –∫–ª—é—á–∞
async function loadSavedApiKey() {
    try {
        const result = await chrome.storage.local.get(['geminiApiKey']);
        if (result.geminiApiKey) {
            apiKeyInput.value = result.geminiApiKey;
            showStatus('success', 'API –∫–ª—é—á –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞');
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ API –∫–ª—é—á–∞:', error);
        showStatus('error', '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –∫–ª—é—á–∞');
    }
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–∏/–ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å
    togglePasswordBtn.addEventListener('click', togglePasswordVisibility);
    
    // –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª—é—á–∞
    saveKeyBtn.addEventListener('click', saveApiKey);
    
    // –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–ª—é—á–∞
    testKeyBtn.addEventListener('click', testApiKey);
    
    // –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è Enter –≤ –ø–æ–ª—ñ –≤–≤–æ–¥—É
    apiKeyInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            saveApiKey();
        }
    });
    
    // –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ –≤–≤–æ–¥—É
    apiKeyInput.addEventListener('input', () => {
        hideStatus();
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ –ø–∞—Ä–æ–ª—è
function togglePasswordVisibility() {
    const isPassword = apiKeyInput.type === 'password';
    
    if (isPassword) {
        apiKeyInput.type = 'text';
        togglePasswordBtn.textContent = 'üôà';
        togglePasswordBtn.title = '–ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –∫–ª—é—á';
    } else {
        apiKeyInput.type = 'password';
        togglePasswordBtn.textContent = 'üëÅÔ∏è';
        togglePasswordBtn.title = '–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–ª—é—á';
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è API –∫–ª—é—á–∞
async function saveApiKey() {
    const apiKey = apiKeyInput.value.trim();
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–ª—é—á–∞
    if (!apiKey) {
        showStatus('error', '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å API –∫–ª—é—á');
        return;
    }
    
    // –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –∫–ª—é—á–∞ (Google API –∫–ª—é—á—ñ –∑–∞–∑–≤–∏—á–∞–π –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ AIza)
    if (!apiKey.startsWith('AIza') || apiKey.length < 30) {
        showStatus('error', '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞. –ö–ª—é—á –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ "AIza"');
        return;
    }
    
    try {
        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        showStatus('loading', '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª—é—á–∞...');
        setButtonsDisabled(true);
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–ª—é—á –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ
        await chrome.storage.local.set({ geminiApiKey: apiKey });
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
        showStatus('success', 'API –∫–ª—é—á —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!');
        
        console.log('API –∫–ª—é—á –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ API –∫–ª—é—á–∞:', error);
        showStatus('error', '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–ª—é—á–∞');
    } finally {
        setButtonsDisabled(false);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞
async function testApiKey() {
    const apiKey = apiKeyInput.value.trim();
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–ª—é—á–∞
    if (!apiKey) {
        showStatus('error', '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å API –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è');
        return;
    }
    
    try {
        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        showStatus('loading', '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞...');
        setButtonsDisabled(true);
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ background script –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        const response = await chrome.runtime.sendMessage({
            action: 'testApiKey',
            apiKey: apiKey
        });
        
        if (response.success) {
            showStatus('success', `‚úÖ ${response.result}`);
            console.log('API –∫–ª—é—á –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
        } else {
            showStatus('error', `‚ùå ${response.error}`);
            console.error('–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞:', response.error);
        }
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ API –∫–ª—é—á–∞:', error);
        showStatus('error', '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ –∫–ª—é—á–∞');
    } finally {
        setButtonsDisabled(false);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
function showStatus(type, message) {
    statusDiv.className = `status ${type}`;
    statusDiv.textContent = message;
    statusDiv.classList.remove('hidden');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ø–µ–≤–Ω–∏–π —á–∞—Å
    if (type === 'success') {
        setTimeout(() => {
            hideStatus();
        }, 3000);
    } else if (type === 'error') {
        setTimeout(() => {
            hideStatus();
        }, 5000);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
function hideStatus() {
    statusDiv.classList.add('hidden');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–º–∫–Ω–µ–Ω–Ω—è/—É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
function setButtonsDisabled(disabled) {
    saveKeyBtn.disabled = disabled;
    testKeyBtn.disabled = disabled;
    apiKeyInput.disabled = disabled;
    togglePasswordBtn.disabled = disabled;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–ª–∞–≥—ñ–Ω
function getExtensionInfo() {
    const manifest = chrome.runtime.getManifest();
    return {
        name: manifest.name,
        version: manifest.version,
        description: manifest.description
    };
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö (–¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è)
async function clearStoredData() {
    try {
        await chrome.storage.local.clear();
        apiKeyInput.value = '';
        showStatus('success', '–í—Å—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ');
        console.log('–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ');
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:', error);
        showStatus('error', '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö');
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (–¥–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å)
async function exportSettings() {
    try {
        const data = await chrome.storage.local.get(null);
        const exportData = {
            ...data,
            exportDate: new Date().toISOString(),
            version: getExtensionInfo().version
        };
        
        // –ú–∞—Å–∫—É—î–º–æ API –∫–ª—é—á –¥–ª—è –±–µ–∑–ø–µ–∫–∏
        if (exportData.geminiApiKey) {
            exportData.geminiApiKey = exportData.geminiApiKey.substring(0, 10) + '***';
        }
        
        const blob = new Blob([JSON.stringify(exportData, null, 2)], {
            type: 'application/json'
        });
        
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'freelance-response-generator-settings.json';
        a.click();
        
        URL.revokeObjectURL(url);
        showStatus('success', '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ');
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ:', error);
        showStatus('error', '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å');
    }
}

// –î–æ–¥–∞—Ç–∫–æ–≤—ñ —É—Ç–∏–ª—ñ—Ç–∞—Ä–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
const utils = {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î —Ä—è–¥–æ–∫ –≤–∞–ª—ñ–¥–Ω–∏–º API –∫–ª—é—á–µ–º
    isValidApiKey: (key) => {
        return key && typeof key === 'string' && key.startsWith('AIza') && key.length >= 30;
    },
    
    // –ú–∞—Å–∫—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    maskApiKey: (key) => {
        if (!key || key.length < 10) return key;
        return key.substring(0, 10) + '*'.repeat(key.length - 10);
    },
    
    // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
    formatDate: (date) => {
        return new Intl.DateTimeFormat('uk-UA', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        }).format(date);
    }
};

// –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
console.log('Popup script –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ', getExtensionInfo());
